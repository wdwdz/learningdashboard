library(devtools)
use_package("shiny")
use_package("shinydashboard")
use_package("DT")
use_package("readr")
use_package("dplyr")
use_package("ggplot2")
use_package("lubridate")
use_r("app")
devtools::load_all(".")
library(readr)
dat <- read_rds("appdata.rds")
library(devtools)
use_data(dat)
use_r("data")
install.packages(sinew)
install.packages("sinew")
sinew::makeOxygen(dat)
sinew::makeOxygen(dat)
iris
sinew::makeOxygen(iris)
dat
sinew::makeOxygen(dat)
sinew::makeOxygen(dat)
mydata <- dat
sinew::makeOxygen(mydata)
sinew::makeOxygen(mydata)
?makeOxygen
devtools::load_all(".")
devtools::load_all(".")
load("~/R Scripts/learningdashboard/data/dat.rda")
devtools::load_all(".")
runApp('R')
sinew::makeOxygen(dat)
sinew::makeOxygen(dat$appdata.log)
?dat
?dat
?dat
?dat
?dat
?dat
sinew::makeOxygen(dat$appdata.group)
sinew::makeOxygen(dat$appdata.user)
?dat
sinew::makeOxygen(dat$appdata.survey)
sinew::makeOxygen(dat$appdata.post)
sinew::makeOxygen(dat$appdata.comment)
?dat
class(dat$appdata.log$day)
?dat
devtools::load_all(".")
runApp('R')
runApp('R')
usethis::use_test()
devtools::load_all(".")
shiny::runTests("learningdashboard")
devtools::load_all(".")
runApp('R')
runApp('R')
install.packages("shinytest")
shinytest::installDependencies()
shinytest2::use_shinytest2()
install.packages("shinytest2")
shinytest2::use_shinytest2()
shinytest2::use_shinytest2_test()
library(shinytest2)
app <- AppDriver$new()
app <- AppDriver$new()
getwd()
app <- AppDriver$new()
app
app$set_inputs(
time = 1
)
app$get_value(
user()$y
)
app$get_value(
output = "userBox"
)
?get_value
app$expect_values()
app$get_variant(
)
app$get_values()
app$get_values()$user()
app$get_values()$userinfo
app$get_values()$output
app$get_values(export = TRUE)
app$set_inputs(
time = 1,
group = Pnetid,
event = "message"
)
?dat
app$set_inputs(
time = 1,
group = "Pnetid",
event = "message"
)
app$get_values()
app$get_values(export = TRUE)
app$get_values(export = "user")
app$get_values(export = "user")
app$set_inputs(
time = 1
)
app$get_values(export = "user")
app <- AppDriver$new()
app$set_inputs(
time = 1
)
app$get_value(
output = "userBox"
)
testthat::expect_equal(
app$get_values(export = "user"),"349"
)
testthat::expect_equal(
app$get_values(export = "user"),"349"
)
app$get_values(export = "user")
app$get_values(export = "user1")
app$get_values(export = "user1")
# app$get_values(export = "user")
app$get_values(export = TRUE)
app$stop()
app <- AppDriver$new()
app$set_inputs(
time = 1
)
# app$get_values(export = "user")
app$get_values(export = TRUE)
expect_equal(
app$get_values(export = "user1"),349
)
expect_equal(
app$get_values(export = "user1"),"349"
)
expect_equal(
unlist(app$get_values(export = "user1")),"349"
)
expect_equal(
unlist(app$get_values(export = "user1")),349
)
unlist(app$get_values(export = "user1"))
expect_equal(
as.numeric(app$get_values(export = "user1")),349
)
expect_equal(
app$get_values(export = "user1"),
349
)
expect_equal(
app$get_values(export = "user1"),
list(349)
)
expect_equal(
app$get_values(export = "user1"),
"349"
)
class(app$get_values(export = "user1"))
app$stop()
app <- AppDriver$new()
app$set_inputs(
time = 1
)
app$get_values(export = "user1")
class(app$get_values(export = "user1"))
app$stop()
app <- AppDriver$new()
app$set_inputs(
time = 1
)
expect_equal(
app$get_values(export = "user1"),
349
)
app$get_values(export = "user1")
expect_equal(
app$get_values(export = "user1")[1],
349
)
str(app$get_values(export = "user1"))
expect_equal(
app$get_values(export = "user1")$user1,
349
)
t<- app$get_values(export = "user1")
t$export
t$export$user1
unlist(t)
class(unlist(t))
unlist(app$get_values(export = "user1"))
unlist(app$get_values(export = "user1")) - 349
expect_equal(
app$get_values(export = "user1")$export$user1,
349
)
expect_equal(
app$get_values(export = "user1"),
349
)
expect_equal(
unlist(app$get_values(export = "user1")),
349
)
expect_equal(
uname(unlist(app$get_values(export = "user1"))),
349
)
expect_equal(
unname(unlist(app$get_values(export = "user1"))),
349
)
app$stop()
testServer(server, {
session$setInputs(time = 1)
print(user())
})
devtools::load_all(".")
test_that("reactives and output updates", {
testServer(server, {
session$setInputs(time = 1)
expect_equal(user()$y, 349)
})
})
test_that("reactives and output updates", {
testServer(server, {
session$setInputs(time = 1)
expect_equal(user(), 349)
})
})
library(devtools)
use_vignette("Intro_to_learningdashboard", title = "Intro to learningdashboard")
devtools::load_all(".")
test_that("reactives and output updates", {
testServer(server, {
session$setInputs(time = 1)
expect_equal(user()$y, 349)
})
})
help(learningdashboard)
help(package ="learningdashboard")
devtools::load_all(".")
dat
?learningdashboard
?dat
??learningdashboard
library(learningdashboard)
runApp('R')
runApp()
library(shiny)
library(learningdashboard)
runApp()
getwd()
setwd("~/R Scripts/learningdashboard/R")
runApp()
?runApp
getwd()
setwd("~/R Scripts/learningdashboard")
runApp("R")
runApp("R/App.R")
dat
help("learningdashboard")
